View(test.frame)
str(test.frame)
x<-c(1,3,5,6,8,9)
temp.frame<-as.data.frame(test.frame)
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:length(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:length(x))
{
test.frame[x]<-as.factor(test.frame[x])
}
x
x<-c("Pclass","Sex","SibSp","Parch","Embarked")
for(i in 1:length(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:ncol(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:nrow(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
length(x)
count.fields(x)
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:length(x))
{
test.frame[,x]<-as.factor(test.frame[,x])
x<-x+1
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[,x])
x<-x+1
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
un<-unlist(x)
for(i in x)
{
test.frame[,x]<-as.factor(un)
}
str(test.frame)
for(i in x)
{
test.frame[,x]<-as.factor(test.factor(un))
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame(un))
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[un])
}
for(i in x)
{
test.frame<-as.factor(un)
}
str(test.frame)
temp.frame<-t1.frame
t1.frame<-temp.frame
View(temp.frame)
View(t1.frame)
View(temp.frame)
for(i in x)
{
temp.frame[,]<-as.factor(un)
}
rm(test.frame)
rm(i)
rm(un)
for(i in x)
{
temp.frame[,x]<-as.factor(temp.frame[,x])
}
test.frame<-temp.frame
rm(t1.frame,temp.frame)
View(test.frame)
str(test.frame)
x<-("Pclass","Sex","SibSp","Parch","Embarked")
x<-c("Pclass","Sex","SibSp","Parch","Embarked")
for(i in x)
{
temp.frame$x<-as.factor(temp.frame$x)
}
for(i in x)
{
test.frame$x<-as.factor(test.frame$x)
}
str(x)
rm(x)
View(test.frame)
x<-c(1,3,5,6,8)
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
un<-unlist(x)
temp.frame<-test.frame
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame(un))
}
for(i in x)
{
test.frame[,x]<-as.factor(test.frame[un])
}
for(i in x)
{
test.frame[,un]<-as.factor(test.frame[,un])
}
for(i in un)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in un)
{
test.frame[,x]<-as.factor(test.frame[,un])
}
for(i in un)
{
test.frame[,un]<-as.factor(test.frame[,un])
}
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
}
for(i in 1:x)
{
test.frame[,x]<-as.factor(test.frame[,x])
x<-x+1
}
rm(i,un,x)
rm(temp.frame)
View(test.frame)
install.packages("randomForest")
str(test.frame)
test.frame$Pclass<-as.factor(test.frame$Pclass)
test.frame$Sex<-as.factor(test.frame$Sex)
test.frame$SibSp<-as.factor(test.frame$SibSp)
test.frame$Parch<-as.factor(test.frame$Parch)
library(randomForest)
test.frame$Embarked<-as.factor(test.frame$Embarked)
str(test.frame)
test.frame$Survived<-as.factor(test.frame$Survived)
str(trained.frame)
trained.frame$Sex<-as.factor(trained.frame$Sex)
trained.frame$SibSp<-as.factor(trained.frame$SibSp)
trained.frame$Parch<-as.factor(trained.frame$Parch)
str(trained.frame)
trained.frame$Embarked<-as.factor(trained.frame$Embarked)
str(trained.frame)
ncol(trained.frame)
m1<-randomForest(Survival~.,data = trained.frame,mtry=3,ntree=20)
m1<-randomForest(Survived~.,data = trained.frame,mtry=3,ntree=20)
??mtry
??randomForest
??mtry
m1<-tuneRF(trained.frame,trained.frame$Survived,improve=0.05,doBest = TRUE,plot = TRUE)
View(trained.frame)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve=0.05,doBest = TRUE,plot = TRUE,stepFactor = 1.5)
str(trained.frame)
is.na(trained.frame)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve=0.05,doBest = TRUE,plot = TRUE,stepFactor = 1.5,is.na(trained.frame)==TRUE)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve=0.05,doBest = TRUE,plot = TRUE,stepFactor = 1.5,is.na(trained.frame)==FALSE)
trained.frame$Embarked<-subset(trained.frame,is.na(trained.frame$Embarked)==FALSE)
trained.frame<-subset(trained.frame,is.na(trained.frame$Embarked)==FALSE)
test.frame<-subset(test.frame,is.na(test.frame$Embarked)==FALSE)
View(test.frame)
View(trained.frame)
m1<-tuneRF(trained.frame,trained.frame$Survived,stepFactor = 1.3,doBest = TRUE,plot = TRUE,ntreeTry = 50,improve = 0.04)
m1<-tuneRF(trained.frame,trained.frame$Survived,stepFactor = 1.3,doBest = TRUE,plot = TRUE,ntreeTry = 50,improve = 0.04)
m1<-tuneRF(trained.frame[2:9],trained.frame$Survived,stepFactor = 1.3,doBest = TRUE,plot = TRUE,ntreeTry = 50,improve = 0.04)
m1<-tuneRF(trained.frame[2:9],trained.frame$Survived,stepFactor = 1.3,doBest = TRUE,plot = TRUE,ntreeTry = 50,improve = 0.04,mtryStart = 2)
str(trained.frame)
trained.frame$Name<-as.factor(trained.frame$Name)
test.frame$Name<-as.factor(test.frame$Name)
str(trained.frame)
str(test.frame)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve = 0.05,plot = TRUE,doBest = TRUE,ntreeTry = 50,stepFactor = 1.5)
trained.frame<-trained.frame[-c(3)]
View(trained.frame)
test.frame<-test.frame[-c(2)]
View(test.frame)
View(trained.frame)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve = 0.05,plot = TRUE,doBest = TRUE,ntreeTry = 50,stepFactor = 1.5)
m1
m1<-tuneRF(trained.frame,trained.frame$Survived,improve = 0.05,plot = TRUE,doBest = TRUE,ntreeTry = 50,stepFactor = 1.5)
m1
plot(m1)
m1<-tuneRF(trained.frame,trained.frame$Survived,improve = 0.05,plot = TRUE,doBest = TRUE,ntreeTry = 50,stepFactor = 1.5,trace = TRUE)
m1<-randomForest(Survived~.,data = trained.frame,mtry=3,ntree=50)
m1
str(trained.frame)
m1
importance(m1)
varImpPlot(m1)
p1<-predict(m1,test.frame,type = 'class')
str(test.frame)
p1<-predict(m1,test.frame)
str(m1)
dim(m1)
m1
str(trained.frame)
str(test.frame)
p1<-predict(m1,test.frame[1:8],type = "class")
p1<-predict(m1,test.frame,type = "class")
trained.frame$SibSp<-as.numeric(trained.frame$SibSp)
test.frame$SibSp<-as.numeric(test.frame$SibSp)
trained.frame$Parch<-as.numeric(test.frame$Parch)
trained.frame$Parch<-as.numeric(trained.frame$Parch)
test.frame$Parch<-as.numeric(test.frame$Parch)
str(test.frame)
rm(m1)
m1<-randomForest(SUrvived~.,trained.frame,n=50,mtry=3)
m1<-randomForest(Survived~.,trained.frame,n=50,mtry=3)
m1<-randomForest(Survived~.,trained.frame,ntree=50,mtry=3)
m1
plot(m1)
varImpPlot(m1)
p1<-predict(m1,test.frame,type = "class")
p1
p1<-predict(m1,test.frame,type = "class")
p1<-predict(m1,test.frame)
p1
p1<-predict(m1,newdata = test.frame,type = "class")
p1
str(test.frame$Survived)
str(trained.frame$Survived)
trained.frame$Survived<-as.factor(trained.frame$Survived)
p1<-predict(m1,newdata = test.frame,type = "class")
p1
str(trained.frame)
trained.frame$Survived<-as.numeric(trained.frame$Survived)
p1
install.packages("caret")
library(caret)
test.frame$Survived<-test.frame(response=p1)
test.frame(id=test.frame$Survived,response=p1)
test.frame
test.frame$Survived<-predict(m1,newdata = test.frame,type = "class")
View(test.frame)
test.frame$Survived<-as.logical(test.frame$Survived)
View(test.frame)
test.frame$Survived<-predict(m1,newdata = test.frame,type = "class")
View(test.frame)
test.frame$Survived<-rep(na,nrow(test.frame))
test.frame$Survived<-rep(Na,nrow(test.frame))
test.frame$Survived<-rep(NA,nrow(test.frame))
View(test.frame)
m1
p1
str(p1)
rm(p1)
m1
str(trained.frame)
p1<-predict(m1,newdata = test.frame,type = "class")
p1
p1(1)
p1
str(p1)
p1[1]
nrow(p1)
x<-1
x<-1
for(i in p1)
{
if(p1[x]>0.5)
{
p1[x]<-as.logical(p1[x])==TRUE
}
else
{
p1[x]<-as.logical(p1[x])==FALSE
}
x<-x+1
}
p1
x<-1
for(i in p1)
{
if(p1[x]>0.5)
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1
x<-1
for(i in p1)
{
if(p1[x]>0.5)
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1<-predict(m1,newdata = test.frame$Survived,type = "class")
p1<-predict(m1,newdata = test.frame$Survived,type = "class")
p1<-predict(m1,newdata = test.frame,type = "class")
str(p1)
p1
summary(m1)
summary(p1)
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1<-predict(m1,newdata = test.frame,type = "class")
p1<-subset(p1,is.na(p1)==FALSE)
p1
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1
test.frame$Survived<-p1
test.frame$Survived<-as.numeric(p1)
test.frame$Survived<-test.frame$Survived[-c(332),]
test.frame<-test.frame[-c(332),]
p1<-predict(m1,newdata = test.frame,type = "class")
p1
test.frame<-test.frame[-c(160)]
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1<-predict(m1,newdata = test.frame,type = "class")
p1
p1<-subset(p1,is.na(p1)==FALSE)
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
test.frame$Survived<-p1
p1<-predict(m1,newdata = test.frame,type = "class")
p2<-subset(p1,is.na(p1)==FALSE)
p2<-subset(p1,is.na(p1)==TRUE)
p2
p1
library(readr)
Titanic_test <- read_csv("C:/Users/Sharvil/Desktop/R/Titanic/Titanic_test.csv")
View(Titanic_test)
test.frame<-as.data.frame(Titanic_test)
View(test.frame)
test.frame<-test.frame[-c(1,3)]
test.frame<-test.frame[-c(6)]
test.frame<-test.frame[-c(7)]
test.frame$Survived<-rep(NA,nrow(test.frame))
View(test.frame)
rm(p1,p2,x)
rm(i)
test.frame<-subset(test.frame,is.na(test.frame$Age)==FALSE)
View(test.frame)
test.frame$Age<-ceiling(test.frame$Age)
test.frame$Fare<-round(test.frame$Fare)
View(test.frame)
p1<-predict(m1,newdata = test.frame,type="class")
test.frame
str(test.frame)
str(trained.frame)
test.frame$Pclass<-as.factor(test.frame$Pclass)
test.frame$Sex<-as.factor(test.frame$Sex)
test.frame$Embarked<-as.factor(test.frame$Embarked)
str(test.frame)
str(trained.frame)
test.frame$SibSp<-as.numeric(test.frame$SibSp)
test.frame$Parch<-as.numeric(test.frame$Parch)
p1<-predict(m1,newdata = test.frame,type="class")
p1
p2<-subset(p1,is.na(p1)==TRUE)
p2
test.frame<-test.frame[-c(153),]
rm(p2)
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
p1
p1<-predict(m1,newdata = test.frame,type="class")
p1<-subset(p1,is.na(p1)==FALSE)
p1
test.frame<-subset(test.frame,is.na(test.frame$Fare)==FALSE)
View(test.frame)
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}p1
x<-1
for(i in p1)
{
if(p1[x]> (0.5))
{
p1[x]<-(as.logical(p1[x])==TRUE)
}
else
{
p1[x]<-(as.logical(p1[x])==FALSE)
}
x<-x+1
}
test.frame$Survived<-p1
View(test.frame)
View(Titanic_test)
test.frame
table(test.frame)
table(test.frame$Sex)
table(test.frame$Sex,test.frame$Survived)
table(test.frame$Pclass,test.frame$Survived)
write.csv(test.frame,file = "C:/Users/Sharvil/Desktop/R/Titanic/Excel/Test.csv")
ggplot(test.frame,aes(x=Pclass,fill=factor(Survived)))+
)
ggplot(test.frame,aes(x=Pclass,fill=factor(Survived)))
ggplot(test.frame,aes(x=Pclass,fill=factor(Survived)))+stat_count(width=0.4)
ggplot(test.frame,aes(x=Pclass,fill=factor(Survived)))+stat_count(width=0.4)+xlab("Class")+ylab("Survived")
ggplot(test.frame,aes(x=Sex,fill=factor(Survived)))+stat_count(width=0.4)+xlab("Class")+ylab("Survived")
m1
str(m1)
write(m1,"C:/Users/Sharvil/Desktop/R/Titanic/")
savehistory("C:/Users/Sharvil/Desktop/R/Titanic/SourceCode.Rhistory")
